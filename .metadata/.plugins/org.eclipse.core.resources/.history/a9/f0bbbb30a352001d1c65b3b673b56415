package com.vue3shopping.shopping.controller;

import java.util.List;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CookieValue;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.server.ResponseStatusException;

import com.vue3shopping.shopping.entity.Cart;
import com.vue3shopping.shopping.entity.Item;
import com.vue3shopping.shopping.repository.CartRepository;
import com.vue3shopping.shopping.repository.ItemRepository;
import com.vue3shopping.shopping.service.JwtService;

@RestController
public class CartController {
	
	@Autowired
	JwtService jwtService;
	
	@Autowired
	CartRepository cartRepository;
	
	@Autowired
	ItemRepository itemRepository;
	
	// cart 정보를 가져오기
	@GetMapping("/api/cart/items")
	public ResponseEntity<Object> getCartItems(@CookieValue(value="token", required = false) String token) {
		
		if(jwtService.isValid(token)) {
			throw new ResponseStatusException(HttpStatus.UNAUTHORIZED);
		}
		
		int memberId = jwtService.getId(token);
		List<Cart> carts = cartRepository.findByMemberId(memberId);
		
		// youtube보고 따라한 아래 명령어를 먹히지 않았음 => 그래서 collect()함수를 찾아 대체했음.
		// List<Integer> itemIds = carts.stream().map(Cart::getItemId).toList();
		// 아래 카트의 정보를 가져오면 vo 한 개에 대한 정보만 가져올테니, list로 가져와서 다건을 처리할 수 있도록 해준다.
		List<Integer> itemIds = carts.stream().map(Cart::getItemId).collect(Collectors.toList());
		
		// 다건으로 처리된 list형식을 items 참조변수에 담는다.
		List<Item> items =itemRepository.findByIdIn(itemIds);
		
		return new ResponseEntity<>(items, HttpStatus.OK);
	}
	
	// cart의 정보를 넣기(push)
	@PostMapping("/api/cart/items/{itemId}")
	public ResponseEntity<Object> pushCartItem(@PathVariable("itemId") int itemId, @CookieValue(value="token", required = false) String token) {
		
		if(jwtService.isValid(token)) {
			throw new ResponseStatusException(HttpStatus.UNAUTHORIZED);
		}
		
		int memberId = jwtService.getId(token);
		Cart cart = cartRepository.findByMemberIdAndItemId(memberId, itemId);
		
		// cart가 없을 때는 새로운 cart를 추가하는데, 아래 명령어로 memberId, itemId를 인자로 받아서 set으로 세팅해준다.
		if(cart == null) {
			Cart newCart = new Cart();
			newCart.setMemberId(memberId);
			newCart.setItemId(itemId);
			cartRepository.save(newCart);
		}
		
		return new ResponseEntity<>(HttpStatus.OK);
	}

}
